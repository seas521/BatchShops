package com.if2c.harald.job;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.apache.log4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class AutoGoodsPriceAndFreightJob extends JobBase {

	static final org.slf4j.Logger logger = LoggerFactory
			.getLogger(PromotionStatusJob.class);
	SimpleDateFormat myFormatter = new SimpleDateFormat("yyyy-MM-dd");

	public void run() {
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
		Connection conn = null;
		try {
			conn = this.getConnection();
			conn.setAutoCommit(false);
			autoConfirmAuto(conn);
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			if (null != conn) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
				conn = null;
			}
		}
		logger.info("结束");
	}

	public void autoConfirmAuto(Connection conn) throws SQLException {
		PreparedStatement autoComments = null;
		PreparedStatement autoExchanges = null;
		PreparedStatement autoTaxPoint = null;
		PreparedStatement autoFuelFloat = null;
		try {
			String sqlSpu = "select gs.id,gs.category_id,gs.delivery_country_id,gs.currency_id,gs.freight_template_id,gs.length,gs.width,gs.height,gs.weight,seller.`type`  from goods_series gs "
					+ " left join shop on shop.id=gs.shop_id "
					+ " left join seller on seller.id=shop.seller_id "
					+ " where gs.is_virtual=1 and gs.status in (4,5)";
			// 查找燃油浮动
			String sqlFuel = "select fuel_float.deliver_type_code,fuel_float.float from fuel_float where id in (select max(id) from fuel_float group by deliver_type_code order by create_time desc)";
			// 查找税率
			String sqlTp = "select tax_point.category_id,tax_point.tax from tax_point";
			// 查找所有最新汇率
			String sqlRate = "select * from exchange_rate_list where id in (select max(id) from exchange_rate_list group by currency order by create_time desc) ";

			Map<String, Float> exchange = new HashMap<String, Float>();
			Map<Integer, Float> taxPoint = new HashMap<Integer, Float>();
			Map<String, Float> fuelFloat = new HashMap<String, Float>();

			// 得到最新一组汇率的map

			autoExchanges = conn.prepareStatement(sqlRate);
			ResultSet exchangResult = autoExchanges.executeQuery();

			while (exchangResult.next()) {
				if (!"CNY".equals(exchangResult.getString("currency"))) {
					exchange.put(exchangResult.getString("currency"),
							exchangResult.getFloat("exchange"));
				}
			}
			// 得到所有类目的税率map
			autoTaxPoint = conn.prepareStatement(sqlTp);
			ResultSet taxPointResult = autoTaxPoint.executeQuery();

			while (taxPointResult.next()) {
				taxPoint.put(taxPointResult.getInt("category_id"),
						taxPointResult.getFloat("tax"));
			}

			// 得到最新的燃油浮动map
			autoFuelFloat = conn.prepareStatement(sqlFuel);
			ResultSet fuelFloatResult = autoFuelFloat.executeQuery();

			while (fuelFloatResult.next()) {
				fuelFloat.put(fuelFloatResult.getString("deliver_type_code"),
						fuelFloatResult.getFloat("float"));
			}

			autoComments = conn.prepareStatement(sqlSpu);
			ResultSet autcommentOrder = autoComments.executeQuery();
			while (autcommentOrder.next()) {
				BigDecimal price = null;
				long id = autcommentOrder.getLong("id");
				try {
					String currencyType = autcommentOrder
							.getString("currency_id");
					int categoryId = autcommentOrder.getInt("category_id");
					int countryId = autcommentOrder
							.getInt("delivery_country_id");
					int freightTemplateId = autcommentOrder
							.getInt("freight_template_id");
					Double length = autcommentOrder.getDouble("length");
					Double width = autcommentOrder.getDouble("width");
					Double height = autcommentOrder.getDouble("height");
					Double weight = autcommentOrder.getDouble("weight");
					int type = autcommentOrder.getInt("type");
					float tax = taxPoint.get(categoryId);
					Double weights = length * width * height / 5000;
					if (weights > weight) {
						weight = weights;
					}
					// 更新sku详情页价格
					price = updateGoodsSalePrice(id, currencyType, tax,
							exchange, conn);
					// 更新spu:update_time
					updateGoodsSeriesTime(id, conn);
					// 更新运费
					if (type == 1 || type == 5) {
						// 删除spu的运费
						deleteGoodsSeriesTemplate(id, conn);
						// 跟新spu运费
						updateGoodsSeriesTemplatePrice(id, freightTemplateId,
								price, countryId, weight, fuelFloat, tax, conn);
					}
					conn.commit();

				} catch (Exception e) {
					try {
						conn.rollback();
					} catch (SQLException e1) {
						e1.printStackTrace();
					}
					logger.info("spuId=" + id + "更新商品信息失败");
					e.printStackTrace();
				}
			}
		
		} catch (SQLException e) {

			e.printStackTrace();
		}

		finally {
			closePs(autoComments);
			closePs(autoExchanges);
			closePs(autoTaxPoint);
			closePs(autoFuelFloat);
		}
	}

	public void updateGoodsSeriesTemplatePrice(long id, int freightTemplateId,
			BigDecimal price, int countryId, Double weight,
			Map<String, Float> fuelFloat, float tax, Connection conn)
			throws SQLException {
		PreparedStatement autoComments = null;
		PreparedStatement ps2 = null;
		try {
			// 查询运费模板下的具体方法
			String sqlDeliverType = "select dt.id,dt.deliver_type_code,dt.price_float from deliver_type dt where dt.freight_id=?";
			// 添加spu的运费
			String sqlInFreight = "insert into goods_deliver_type (goods_series_id,deliver_type_id,freight) values (?,?,?)";

			autoComments = conn.prepareStatement(sqlDeliverType);
			autoComments.setInt(1, freightTemplateId);
			ResultSet autoDeliverType = autoComments.executeQuery();
			while (autoDeliverType.next()) {
				String priceTemplate = "";
				int deliverTypeId = autoDeliverType.getInt("id");
				String deliverTypeCode = autoDeliverType
						.getString("deliver_type_code");
				int priceFloat = autoDeliverType.getInt("price_float");
				float fuel = fuelFloat.get(deliverTypeCode);
				// 算出战略职工运费模板运费
				priceTemplate = notDhlTemplate(deliverTypeCode, countryId,
						weight, conn);
				float totalPrice = 0f;
				totalPrice = (float) (Float.valueOf(priceTemplate)
						* (1 + priceFloat * 0.01) + (Float
						.valueOf(priceTemplate) * (1 + priceFloat * 0.01) + Float
							.valueOf(price.toString())) * tax * 0.01);
				totalPrice = Math.round(totalPrice);
				
				    ps2 = conn.prepareStatement(sqlInFreight);
					ps2.setLong(1, id);
					ps2.setInt(2, deliverTypeId);
					ps2.setFloat(3, totalPrice);
					ps2.execute();
						
			}
		} catch (SQLException e) {

			e.printStackTrace();
		}

		finally {
			closePs(autoComments);
			closePs(ps2);
		}

	}

	public void deleteGoodsSeriesTemplate(long id, Connection conn) {
		PreparedStatement deleteGoodsSeriesTemplate = null;
		// 删除spu的运费
		String sqldelFreight = "delete from  goods_deliver_type where goods_deliver_type.goods_series_id=? ";

		try {

			 deleteGoodsSeriesTemplate = conn
					.prepareStatement(sqldelFreight);
			deleteGoodsSeriesTemplate.setLong(1, id);
			deleteGoodsSeriesTemplate.execute();
		
		} catch (SQLException e) {
			logger.info("spuId=" + id + "删除运费失败");
			e.printStackTrace();
		}
		finally {
			closePs(deleteGoodsSeriesTemplate);
		}
	}

	public void updateGoodsSeriesTime(long id, Connection conn) {
		PreparedStatement updateGoodsSeriesTime = null;
		String sqlUpdateGoodsSeries = "UPDATE goods_series SET update_time=? WHERE id=?";

		
			SimpleDateFormat formatUpdateTime = new SimpleDateFormat(
					"yyyy-MM-dd hh:mm:ss");
			try {
			 updateGoodsSeriesTime = conn
					.prepareStatement(sqlUpdateGoodsSeries);
			updateGoodsSeriesTime.setString(1,
					formatUpdateTime.format(new Date()));
			updateGoodsSeriesTime.setLong(2, id);
			updateGoodsSeriesTime.execute();
			
		} catch (SQLException e) {
			logger.info("spuId=" + id + "更新updateTime失败");
			e.printStackTrace();
		}
			finally {
				closePs(updateGoodsSeriesTime);
			}
	}

	public BigDecimal updateGoodsSalePrice(long id, String currencyType,
			float tax, Map<String, Float> exchange, Connection conn)
			throws SQLException {
		PreparedStatement autoSku = null;
		PreparedStatement updateGoods = null;
		BigDecimal price = null;
		try{
		// 查找sku商品
		String sqlSku = "select goods.id,goods.base_price from goods where goods.status in (4,5) "
				+ " and goods.active=1 and goods.series_id=? order by goods.base_price  ";
		// 更新商品价格
		String sqlUpdateGoods = "UPDATE goods SET sale_price=? WHERE id=?";

		 autoSku = conn.prepareStatement(sqlSku);
		autoSku.setLong(1, id);
		ResultSet autoSkuResult = autoSku.executeQuery();

		while (autoSkuResult.next()) {
			price = new BigDecimal(autoSkuResult.getString("base_price"));
			if ("CNY".equals(currencyType)) {
				tax = 1f;
				BigDecimal rate = new BigDecimal(String.valueOf(tax));
				price.add(price.multiply(rate).multiply(new BigDecimal("1.02")));
			} else {
				BigDecimal rate = new BigDecimal(exchange.get(currencyType));
				price = price.multiply(rate).multiply(new BigDecimal("1.02"));
			}
			int salePrice = Math.round(Float.valueOf(price.toString()));
			try {
				 updateGoods = conn
						.prepareStatement(sqlUpdateGoods);
				updateGoods.setInt(1, salePrice);
				updateGoods.setLong(2, autoSkuResult.getLong("id"));
				updateGoods.execute();
	
			} catch (SQLException e) {
				logger.info("skuId=" + autoSkuResult.getLong("id")
						+ "更新商品详情页价格" + salePrice + "失败");
				e.printStackTrace();
			}

		}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
			finally {
				closePs(autoSku);
				closePs(updateGoods);
			}
		

		return price;
	}

	/*
	 * public String getTodayDate(){ Date today=new Date(); return
	 * myFormatter.format(today); } public String getYesterdayDate(int i){
	 * Calendar cal=Calendar.getInstance(); cal.add(Calendar.DATE,-i); Date
	 * yesterday=cal.getTime(); return myFormatter.format(yesterday); }
	 */

	public String notDhlTemplate(String deliverTypeCode, int countryId,
			double weight, Connection conn) throws SQLException {
		PreparedStatement autoSql = null;
		String priceTemplate = "";
		try{
		// 查询非dhl运费计价方式
		String sql = "select logistics_freight_new.*,(select fuel_float.float from  fuel_float where  "
				+ " fuel_float.deliver_type_code=? order by create_time desc limit 0,1 ) as 'float' from logistics_freight_new "
				+ " left join logistics_company_new on logistics_company_new.deliver_type_code=? "
				+ " left join logistics_area on logistics_area.logistics_id=logistics_company_new.id "
				+ " and logistics_area.country_id = ? "
				+ " where logistics_freight_new.logistics_area_id=logistics_area.id "
				+ "and ((logistics_freight_new.start_weight < ? AND logistics_freight_new.end_weight >= ?) "
				+ "OR (logistics_freight_new.start_weight <= ? AND logistics_freight_new.end_weight = 0) "
				+ "OR (logistics_freight_new.end_weight>?)) limit 0,1";
        autoSql = conn.prepareStatement(sql);
		autoSql.setString(1, deliverTypeCode);
		autoSql.setString(2, deliverTypeCode);
		autoSql.setInt(3, countryId);
		autoSql.setDouble(4, weight);
		autoSql.setDouble(5, weight);
		autoSql.setDouble(6, weight);
		autoSql.setDouble(7, weight);
		ResultSet sqlResult = autoSql.executeQuery();

		while (sqlResult.next()) {
			if ("0".endsWith(sqlResult.getString("freight"))) {
				BigDecimal freight = new BigDecimal(
						sqlResult.getDouble("continue_freight") * weight
								* (1f + sqlResult.getDouble("float") * 0.01))
						.setScale(2, BigDecimal.ROUND_HALF_UP);
				priceTemplate = freight.toString();
			} else {
				BigDecimal freight = new BigDecimal(
						sqlResult.getDouble("freight")
								* (1f + sqlResult.getDouble("float") * 0.01))
						.setScale(2, BigDecimal.ROUND_HALF_UP);
				priceTemplate = freight.toString();
			}
			break;
		}
		
			} catch (SQLException e) {
				
				e.printStackTrace();
			}
				finally {
					closePs(autoSql);
				
				}
		return priceTemplate;
	}

	public static void main(String[] args) throws Exception {
		/* AutoConfirmOrder obj = new AutoConfirmOrder(); */
		AutoGoodsPriceAndFreightJob obj = new AutoGoodsPriceAndFreightJob();
		obj.run();
		System.exit(0);
	}
}
